------------------------------------2020-06-19------------------------------------

select last_name, job_id, department_id, hire_date
from employees
ORDER by 4
/ -->hire_date를 기준으로 오름차순 정렬 

ex)
LAST_NAME         JOB_ID               DEPARTMENT_ID HIRE_DAT
----------------- -------------------- ------------- --------
McEwen            SA_REP                          80 04/08/01
Russell           SA_MAN                          80 04/10/01
Partners          SA_MAN                          80 05/01/05
Davies            ST_CLERK                        50 05/01/29
Tucker            SA_REP                          80 05/01/30
Marlow            ST_CLERK                        50 05/02/16
Bull              SH_CLERK                        50 05/02/20
Everett           SH_CLERK                        50 05/03/03
Errazuriz         SA_MAN                          80 05/03/10
Smith             SA_REP                          80 05/03/10
Ozer              SA_REP                          80 05/03/11



select last_name, job_id, department_id, hire_date
from employees
ORDER by 3
/ -->


LAST_NAME         JOB_ID               DEPARTMENT_ID HIRE_DAT
----------------- -------------------- ------------- --------
Hunold            IT_PROG                         60 06/01/03
Ernst             IT_PROG                         60 07/05/21
Austin            IT_PROG                         60 05/06/25
Pataballa         IT_PROG                         60 06/02/05
Lorentz           IT_PROG                         60 07/02/07
Baer              PR_REP                          70 02/06/07
Russell           SA_MAN                          80 04/10/01
Partners          SA_MAN                          80 05/01/05
Errazuriz         SA_MAN                          80 05/03/10
Cambrault         SA_MAN                          80 07/10/15
Zlotkey           SA_MAN                          80 08/01/29

LAST_NAME         JOB_ID               DEPARTMENT_ID HIRE_DAT
----------------- -------------------- ------------- --------
Tucker            SA_REP                          80 05/01/30
Bernstein         SA_REP                          80 05/03/24
Hall              SA_REP                          80 05/08/20
Olsen             SA_REP                          80 06/03/30
Cambrault         SA_REP                          80 06/12/09
Tuvault           SA_REP                          80 07/11/23
King              SA_REP                          80 04/01/30
Sully             SA_REP                          80 04/03/04
McEwen            SA_REP                          80 04/08/01
Smith             SA_REP                          80 05/03/10
Doran             SA_REP                          80 05/12/15



select last_name, job_id, department_id, hire_date
from employees
ORDER by hire_date DESC
/ -->내림차순

select last_name, job_id, department_id, hire_date
from employees
ORDER by hire__date
/ --->아무 것도 안쓰면 오름차순 = ASC와 같음

select last_name, job_id, department_id, salary
from employees
ORDER by department_id, salary DESC
/ 두개 컬럼을 내림차순으로 정렬 

select last_name as name, department_id
from employees
where employee_id in 176
/직원 아이디가 176인 것 만 표시


select last_name as name, salary*12 as "AnnSal"
from employees
where (salary*12) between 150000 and 200000
/   ---> 연봉 사이 값 계산.


select last_name as name, salary*12 as "AnnSal"
from employees
where (salary*12) not between 150000 and 200000
/  ---->  연봉 사이에 없는 값 계산

select last_name, department_id
from employees
where department_id in (20,50)
order by last_name
/  -----> 20번 및 50번 부서에서 근무하는 모든 사원들의 이름 및 부서 번호를
알파벳순으로 출력하시오.

select last_name, salary*12 as Annsal
from employees
where salary*12 >= 100000 and salary*12 <= 150000 and department_id in (20,50)
/ -->이렇게도 할 수 있지만 바로 아래 처럼 할 수도 있다.

select last_name, salary*12 as Annsal
from employees
where department_id in (20,50) and salary*12 between 100000 and 150000
/ --> 위와 같은 의미

select last_name, hire_date
from employees
where hire_date like '06%'
/ --> 06년도에 고용된 모든 사람들의 이름 및 고용일을 조회한다.

select last_name "Employee", salary "Monthly Salary", department_id
from employees
where department_id in (20,50) and salary between 5000 and 12000
/ ---> pdf 119쪽 예제 문제 6번 /

select last_name, job_id, manager_id
from employees
where department_id is not null
/--> 매니저가 있는 사람들의 이름 및 업무, 매니저 번호를 조회

select last_name, salary*12 as annsal, salary*12*commission_pct as commission
from employees
where commission_pct is not null
order by annsal desc
/

select last_name
from employees
where last_name like '___a%'
/ --> 이름의 네 번째 글자가 a인 사원의 이름을 조회하시오.

select last_name, salary, job_id
from employees
where salary not in (2500,3500,7000) 
and job_id in ('SA_REP','ST_CLERK')
/급여가 2500,3500,7000이 아니며 직업이 SA_REP나 ST_CLERK인 사원의 이름과,급여,
직업을 출력하시오.

select last_name, department_name
from employees, departments
/ ---> 카티시안 곱(cartesian product)  결과 2889개(/107개의 직원 *27개 부서)

select last_name, department_name
from employees, departments
where employees.department_id=departments.department_id -->조인 조건.
/ -->결과 106개

select e.last_name, e.department_id, d.department_name
from employees e, departments d
where e.department_id=d.department_id
/ --> alias기능을 from 절에 써서 join문에 사용가능. ->쓸거면 전체 다써야함.


select e.last_name, e.department_id, d.department_name
from departments d, employees e
where e.department_id=d.department_id
and e.department_id = 90
/ --->table3개 식2개 department_id가 90인것 id로 조인

select e.last_name, e.department_id, d.department_name
from departments d, employees e
where e.department_id=d.department_id
/--->king 없음  106 ##

select e.last_name, e.department_id, d.department_name
from departments d, employees e
where e.department_id=d.department_id(+)
/   --->outer조인(king추가) 107 ## e.department_id를 e에서 가져와서 106(+추가해서 107)

select e.last_name, d.department_id, d.department_name
from employees e, departments d
where e.department_id(+)=d.department_id
/--->106   !!!!!!!!!!!!!!!!!!!!!

select e.last_name, d.department_id, d.department_name
from employees e, departments d
where e.department_id(+)=d.department_id
/--->122나옴 @@ d.department_id를 d에서 가져와서 122(??)!!!!!!!!!!!!!!!!!!!!!!!!!

select e.last_name, d.department_id, d.department_name
from employees e, departments d
where e.department_id=d.department_id(+)
/--->107나옴 @@

select employee_id, last_name, department_name
from departments d, employees e
where d.department_id(+)=e.department_id
order by employee_id asc/
/---->107 나옴 (king 두번나오는데?)


select e.employee_id, e.last_name, e.manager_id, m.last_name
from employees e, employees m
where e.manager_id = m.employee_id
order by e.employee_id
/--->106  : 직원 번호 직원 이름 매니저 id 해당 매니져 이름.
(employees m 이라는 가상의 table을 만들어서 self 조인 실행)

select avg(commission_pct), sum(commission_pct)
from employees
/--->계산이 전체직원의 평균값이 아니라 커미션 받는 사람들 중에 평균값으로 계산됨

select avg(nvl(commission_pct,0))
from employees
/--->전체로 나눈값

select count(distinct department_id)
from employees
/---->중복 제거 해서 11개

select distinct count(department_id)
from employees
/---->계산 값은 중복이 없는데 중복 제거시도...그래서 결과106

select department_id, sum(salary)
from employees
group by department_id
/--->부서 그룹별 연봉

select department_id, job_id, sum(salary)
from employees
group by department_id, job_id
/--->그룹하는 순서는 상관이 없다. select에서 나오는 컬럼순서대로 그룹화가 진행되기 때문.
 그래서 select의 순서가 중요하다.

select department_id, job_id, AVG(salary)
from employees
where AVG(salary) > 8000
group by department_id, job_id
/--->where 절에 그룹함수를 사용할 수 없다.(행을 제한하는 절이 where절 ; 그룹이 올수x)

select department_id, job_id, AVG(salary)
from employees
having AVG(salary) > 8000
group by department_id, job_id
/--->그룹을 제한하는 절이 having절 ; 그룹을 제한 하는 조건 절

select job_id, sum(salary) as payroll
from employees
where job_id not like '%REP%'
group by job_id
having sum(salary) > 13000/
order by sum(salary)
/--->

select job_id, max(salary) as MAX, min(salary) as MIN, sum(salary) as SUM, avg(salary) as AVG
from employees
group by job_id
order by job_id asc
/--->각 직업별, 최대 급여, 최소 급여, 급여 총 합 및 평균 급여를 출력하시오.
단 최대 급여는 MAX,MIN,SUM,AVG로 출력하고, 직업을 오름차순으로 정렬하시오.

select job_id, count(employee_id)
from employees
group by job_id
/--->동일한 직업을 가진 사원들의 총 수를 출력하시오.

select count(distinct manager_id)
from employees
/--->매니저로 근무하는 사원들의 총 수를 출력하시오.

select max(salary)-min(salary)
from employees
/--->사내의 최대급여 와 최소급여 차이.

select manager_id, min(salary)
from employees
where manager_id is not null
having min(salary) >= 5000
group by manager_id
order by min(salary) desc
/--->매니저의 사번 및 그 매니저 밑 사번들 중 최소 급여를 받는 사원의 급여를 출력하시오.
 -매니저가 없는 사람들은 제외한다.
 -최소 급여가 5000 미만인 경우는 제외한다.
 -급여 기준 역순으로 조회한다.
(해결방법 : 매니저 아이디를 그룹핑해서 그 안에서 최소 최대 찾으면 된다.)


select d.department_name, d.location_id, count(e.employee_id), AVG(e.salary)
from departments d, employees e
where d.department_id=e.department_id
group by location_id, department_name
order by location_id
/--->부서 명, 부서위치id, 각 부서 별 사원 총 수, 각 부서 별 평균 급여를 출력하되, 부서위치를
오름차순으로 출력하시오.

















